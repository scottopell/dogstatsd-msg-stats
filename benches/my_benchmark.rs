#![allow(unused)]

use bytes::Bytes;
use criterion::{black_box, criterion_group, criterion_main, Criterion};
use dogstatsd_utils::dogstatsdreplay::DogStatsDReplay;

const ONE_MSG_THREE_LINES: &[u8] = &[
    0xd4, 0x74, 0xd0, 0x60, 0xf3, 0xff, 0x00, 0x00, 0xa9, 0x00, 0x00, 0x00, 0x08, 0xa7, 0xe3, 0x97,
    0xff, 0xaf, 0xbb, 0x88, 0xbf, 0x17, 0x10, 0x99, 0x01, 0x1a, 0x99, 0x01, 0x73, 0x74, 0x61, 0x74,
    0x73, 0x64, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x3a,
    0x33, 0x7c, 0x63, 0x7c, 0x40, 0x31, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x7c, 0x23, 0x65,
    0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x64, 0x65, 0x76, 0x0a, 0x73,
    0x74, 0x61, 0x74, 0x73, 0x64, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x72,
    0x69, 0x63, 0x3a, 0x38, 0x7c, 0x63, 0x7c, 0x40, 0x31, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x7c, 0x23, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x64, 0x65,
    0x76, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x6d,
    0x65, 0x74, 0x72, 0x69, 0x63, 0x3a, 0x37, 0x7c, 0x63, 0x7c, 0x40, 0x31, 0x2e, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x7c, 0x23, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
    0x3a, 0x64, 0x65, 0x76, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

pub fn criterion_benchmark(c: &mut Criterion) {
    c.bench_function("replay parsing -- 3 line single msg", |b| {
        b.iter(|| {
            let mut replay = DogStatsDReplay::new(Bytes::from(ONE_MSG_THREE_LINES));
            let mut s = String::new();

            for _ in 0..3 {
                replay.read_msg(&mut s).unwrap();
                s.clear();
            }
        })
    });
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);
